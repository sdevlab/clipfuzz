FUZZ_DATA:
  name: FUZZ_DATA
  type: struct
  headers: ['gfuzz_curl.h']
  methods:
#1. 규칙 1, L36-53, driver_36_to_53
  # 0
  - driver_36_to_53:
      outputs: ['FUZZ_DATA']
      args: ['char[1048576]','uint32_t']
      #args: ['char[MAX_BUFFER_SIZE]', 'uint32_t']
      exec: |
          uint8_t *data = (uint8_t*)$a0;
          size_t size = $a1 % (MAX_BUFFER_SIZE+1);

          int rc = 0;
          int tlv_rc;
          //FUZZ_DATA fuzz;
          $o0 = (FUZZ_DATA*)malloc(sizeof(FUZZ_DATA));
          TLV tlv;

          signal(SIGPIPE, SIG_IGN);
          memset($o0, 0, sizeof(FUZZ_DATA));

          if (size < sizeof(TLV_RAW)) {
            goto EXIT_LABEL;
          }

          if (fuzz_initialize_fuzz_data($o0, data, size)) {
              goto EXIT_LABEL;
          }
          
          out_ref[0] = reinterpret_cast<void *>(_o0);
          return;
          EXIT_LABEL:
            fuzz_terminate_fuzz_data($o0);
            free($o0);
            $o0 = NULL;

#2. 규칙 1, L55-74 , driver_55_to_74
  # 1
  - driver_55_to_74:
      inputs: ['FUZZ_DATA']
      outputs: ['FUZZ_DATA']
      exec: |
          TLV tlv;
          int tlv_rc;
          int rc = 0;
          for(tlv_rc = fuzz_get_first_tlv($i0, &tlv);
              tlv_rc == 0;
              tlv_rc = fuzz_get_next_tlv($i0, &tlv)) {

            /* Have the TLV in hand. Parse the TLV. */
            rc = fuzz_parse_tlv($i0, &tlv);

            if(rc != 0) {
              goto EXIT_LABEL;
            }
          }

          if(tlv_rc != TLV_RC_NO_MORE_TLVS) {
            goto EXIT_LABEL;
          }
          
          fuzz_set_easy_options($i0);
          
          $o0 = $i0;
          out_ref[0] = reinterpret_cast<void *>(_o0);
          return;
          EXIT_LABEL:
            fuzz_terminate_fuzz_data($i0);
            free($i0);
            $o0 = NULL;


#3. 규칙 1, L80-97, driver_80_to_97
  # 2
  - driver_80_to_97:
      inputs: ['FUZZ_DATA']
      outputs: ['FUZZ_DATA']
      exec: |
          if($i0->header_list != NULL) {
            curl_easy_setopt($i0->easy, CURLOPT_HTTPHEADER, $i0->header_list);
          }
          if($i0->mail_recipients_list != NULL) {
            curl_easy_setopt($i0->easy, CURLOPT_MAIL_RCPT, $i0->mail_recipients_list);
          }
          if($i0->mime != NULL) {
            curl_easy_setopt($i0->easy, CURLOPT_MIMEPOST, $i0->mime);
          }
          if ($i0->httppost != NULL) {
            curl_easy_setopt($i0->easy, CURLOPT_HTTPPOST, $i0->httppost);
          }
          fuzz_handle_transfer($i0);
          $o0 = $i0;
          
#4. 규칙 1, L101, driver_101
  # 3
  - driver_101:
      inputs: ['FUZZ_DATA']
      exec: |
          if ($i0) {
            //free((void*)($i0->state.data));
            fuzz_terminate_fuzz_data($i0);
            free($i0);
          }
          
#5. 규칙 2, L80-82, driver_80_to_82
  # 4
  - driver_80_to_82:
      inputs: ['FUZZ_DATA']
      outputs: ['FUZZ_DATA']
      exec: |
          if($i0->header_list != NULL) {
            curl_easy_setopt($i0->easy, CURLOPT_HTTPHEADER, $i0->header_list);
          }
          $o0 = $i0;
          
#6. 규칙 2, L84-86, driver_84_to_86
  # 5
  - driver_84_to_86:
      inputs: ['FUZZ_DATA']
      outputs: ['FUZZ_DATA']
      exec: |
          if($i0->mail_recipients_list != NULL) {
            curl_easy_setopt($i0->easy, CURLOPT_MAIL_RCPT, $i0->mail_recipients_list);
          }
          $o0 = $i0;
          
#7. 규칙 2, L88-90, driver_88_to_90
  # 6
  - driver_88_to_90:
      inputs: ['FUZZ_DATA']
      outputs: ['FUZZ_DATA']
      exec: |
          if($i0->mime != NULL) {
            curl_easy_setopt($i0->easy, CURLOPT_MIMEPOST, $i0->mime);
          }
          $o0 = $i0;
          
#8. 규칙 2, L92-94, driver_92_to_94
  # 7
  - driver_92_to_94:
      inputs: ['FUZZ_DATA']
      outputs: ['FUZZ_DATA']
      exec: |
          if ($i0->httppost != NULL) {
            curl_easy_setopt($i0->easy, CURLOPT_HTTPPOST, $i0->httppost);
          }
          $o0 = $i0;
          
#9. 규칙 2, L55-66, driver_55_to_66
  # 7
  - driver_55_to_66:
      inputs: ['FUZZ_DATA']
      outputs: ['FUZZ_DATA']
      exec: |
          TLV tlv;
          int tlv_rc;
          int rc = 0;
          for(tlv_rc = fuzz_get_first_tlv($i0, &tlv);
              tlv_rc == 0;
              tlv_rc = fuzz_get_next_tlv($i0, &tlv)) {

            /* Have the TLV in hand. Parse the TLV. */
            rc = fuzz_parse_tlv($i0, &tlv);

            if(rc != 0) {
              goto EXIT_LABEL;
            }
          }
          
          $o0 = $i0;
          out_ref[0] = reinterpret_cast<void *>(_o0);
          return;
          EXIT_LABEL:
            fuzz_terminate_fuzz_data($i0);
            free($i0);
            $o0 = NULL;

          
#10. 규칙 3, L81, driver_81
  # 8
  - driver_81:
      inputs: ['FUZZ_DATA']
      outputs: ['FUZZ_DATA']
      exec: |
          curl_easy_setopt($i0->easy, CURLOPT_HTTPHEADER, $i0->header_list);
          $o0 = $i0;
            
#11. 규칙 3, L85, driver_85
  # 9
  - driver_85:
      inputs: ['FUZZ_DATA']
      outputs: ['FUZZ_DATA']
      exec: |
          curl_easy_setopt($i0->easy, CURLOPT_MAIL_RCPT, $i0->mail_recipients_list);
          $o0 = $i0;
          
#12. 규칙 3, 89, driver_89
  # 10
  - driver_89:
      inputs: ['FUZZ_DATA']
      outputs: ['FUZZ_DATA']
      exec: |
          curl_easy_setopt($i0->easy, CURLOPT_MIMEPOST, $i0->mime);
          $o0 = $i0;
          
#13. 규칙 3, 93, driver_93
  # 11
  - driver_93:
      inputs: ['FUZZ_DATA']
      outputs: ['FUZZ_DATA']
      exec: |
          curl_easy_setopt($i0->easy, CURLOPT_HTTPPOST, $i0->httppost);
          $o0 = $i0;
